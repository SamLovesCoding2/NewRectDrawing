/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rectorder;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Panel;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author lupeiyu
 */
public class Show extends JPanel implements MouseListener, MouseMotionListener
{
    private ArrayList<Windows> window = new ArrayList<Windows>();
 
    private Random random;
    private int x = 0;
    private int y = 0;

    private Color color;
        public int windowX = 0;
        public int windowY = 0;
        public int windowWidth = 0;
        public int windowHeight = 0;
        public OffSet selection;
        Windows currentWindow;
        int distanceX = 0;
        int distanceY = 0;
       
    public Show() {
        super();
        random = new Random();

        this.addMouseListener(this);
        this.addMouseMotionListener(this);
        addWindows();
        
    }
    
    public static void main(String[] args)
    {
        JFrame frame = new JFrame();
        frame.setLayout(new BorderLayout());
        Show show = new Show();
        show.setBackground(Color.WHITE);
        frame.add(show);
        frame.pack();
        frame.setSize(1200,800);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        

    }

    public void addWindows()
    {   
        for(int i = 0;i<=10;i++)
        {
        window.add(new Windows(random.nextInt(300)+100,random.nextInt(300)+100,random.nextInt(200)+200,random.nextInt(200)+200,new Color(random.nextInt(255),random.nextInt(255),random.nextInt(255))));
        }
    }
    public void paintComponent(Graphics g)
    {   super.paintComponent(g);
            for(int i = window.size()-1;i>=0;i--)
            {
                window.get(i).drawRect(g);
            }
            g.drawString(this.selection != null ? (this.selection.offSetX + "/" + this.selection.offSetY) : "No Selections", 10, 10);
            
            //System.out.println("x" + );
    }
    @Override
    public void mouseClicked(MouseEvent evt)
    {
        
       
    }

    @Override
    public void mousePressed(MouseEvent evt)
    {
        
        int distanceX = 0;
        int distanceY = 0;
        Point pointt = evt.getPoint();
        x = pointt.x;
        y = pointt.y;

        
       //System.out.println("x location: " + x + "y locaiton " + y);
        for(int j = 0;j<window.size();j++)
        {
            windowX = window.get(j).getX();
            windowY = window.get(j).getY();
            windowWidth = window.get(j).getWidth();
            windowHeight = window.get(j).getHeight();
            //from top to bottom
            
            if((x>=windowX&&y>=windowY)&&(x<=windowX + windowWidth&&y<=windowY + windowHeight))
            {
                currentWindow = window.get(j);
               
                window.remove(currentWindow);
                window.add(0,currentWindow);
                repaint();
                break;
 
            }
            
            
        }
        
        for(int j = 0;j<window.size();j++)
        {
            windowX = window.get(j).getX();
            windowY = window.get(j).getY();
            windowWidth = window.get(j).getWidth();
            windowHeight = window.get(j).getHeight();
            //from top to bottom
            
            if((x>=windowX&&y>=windowY)&&(x<=windowX + windowWidth&&y<=windowY + windowHeight))
            {
//                System.out.println("Cursor:" + mouseX + "/" + mouseY);
//                System.out.println("window" + currentWindow.getX() + currentWindow.getY());
                currentWindow = window.get(j);
                distanceX = x - currentWindow.getX(); 
                distanceY = y - currentWindow.getY(); 
                selection = new OffSet(currentWindow,distanceX,distanceY);
                
                repaint();
                break;

            }
            
            
        }
    }

    @Override
    public void mouseReleased(MouseEvent e)
    {
        currentWindow = null;
    }

    @Override
    public void mouseEntered(MouseEvent e)
    {
    }

    @Override
    public void mouseExited(MouseEvent e)
    {
    }

    @Override
    public void mouseDragged(MouseEvent e)
    { 
        if(currentWindow != null)
        {  
                Point point = e.getPoint();
                currentWindow.setX(point.x-selection.offSetX);
                currentWindow.setY(point.y-selection.offSetY);
                repaint();
        }
   }
    @Override
    public void mouseMoved(MouseEvent e)
    {
    }
    
}
